#! /usr/bin/env python

import argparse
import subprocess
import os

def sizeof_fmt(num, suffix='B'):
    """
    Taken from https://stackoverflow.com/questions/1094841/reusable-library-to-get-human-readable-version-of-file-size
    """
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)

def subproc_copy(source, dest):
    subprocess.check_call(['cp', source, dest])


if __name__=="__main__":

    parser = argparse.ArgumentParser(description="Copy the dataset 'big' files (the ones with a corresponding md5) from one place to another")
    parser.add_argument("source", help="root path of the source dataset -- recordings are recursively looked for from this path")
    parser.add_argument("dest", default=".", help="root path of the destination dataset")
    parser.add_argument("-f", "--force", action='store_true', help="if true, overwrite existing files. Otherwise, skip them.")

    args = parser.parse_args()

    tobecopied={}
    totalsize = 0
    alreadycopied = 0

    for dirpath, dirs, files in os.walk(args.source, topdown=False):
        for name in files:
            if name.endswith("md5"):
                name = name[:-4]
                sourcepath = os.path.abspath(os.path.join(args.source, dirpath, name))
                if(os.path.exists(sourcepath)):
                    destpath = os.path.abspath(os.path.join(args.dest, dirpath, name))
                    if(os.path.exists(destpath) and not args.force):
                        print("File %s already exist. Skipping it (use -f to force overwrite)" % destpath)
                        alreadycopied += os.path.getsize(sourcepath)
                        continue
                    tobecopied[sourcepath]=destpath
                    totalsize += os.path.getsize(sourcepath)
                else:
                    print("Missing expected file: %s" % sourcepath)


    print("\n\nCopying from %s to %s." % (os.path.abspath(args.source), os.path.abspath(args.dest)))
    print("%d files to copy. %s in total." % (len(tobecopied), sizeof_fmt(totalsize)))
    raw_input("Press Return to proceed, Ctrl+C to abort")

    i = 1
    for source, dest in tobecopied.items():
        print("[%d/%s] (done %s/%s -- %d%%) Copying %s to %s" % (i, len(tobecopied), sizeof_fmt(alreadycopied), sizeof_fmt(totalsize), (alreadycopied * 100./totalsize), source, dest))
        subproc_copy(source, dest)
        alreadycopied += os.path.getsize(source)
        i += 1
            

