#! /usr/bin/env python

import logging
logging.basicConfig(level=logging.INFO)

import argparse
import sys
import os
import yaml
import csv
import numpy as np

from itertools import combinations

from timeline import InterraterReliability, TimelinePrinter, TASKENGAGEMENT, SOCIALENGAGEMENT, SOCIALATTITUDE

CHILDCHILD = "childchild"
CHILDROBOT = "childrobot"

istty = sys.stdout.isatty()

def ddhhmmss(sec):
    return "%dd %02d:%02d:%02d" % (sec//(3600*24), (sec%(3600*24))//3600,((sec%(3600*24))%3600)//60, ((sec%(3600*24))%3600)%60)

def hhmmss(sec):
    return "%02d:%02d:%02d" % (sec//3600,(sec%3600)//60, (sec%3600)%60)

def mmss(sec):
    return "%02d:%02d" % ((sec%3600)//60, (sec%3600)%60)

def normalize_name(name):
    return name.lower().strip("0123456789") 

class Child:

    def __init__(self, participant):
        self.age = participant["age"]
        self.gender = participant["gender"]
        self.id = participant["id"]
        self.details = participant["details"]
        self.nb_frames_visible = float('nan')
        self.percent_visible = float('nan')

    def csvrow(self):
        return [self.age, self.gender]


class Recording:

    def __init__(self,id, experiment, bagfile, annotations):

        self.id = id

        self.experiment = experiment
        self.bagfile = bagfile
        self.annotations = annotations

        self.cdt = self.experiment["condition"]

        # to have the proper list of annotators, turn names lower-case and remove trailing numbers to
        # remove all the cases where the same annotators re-coded the same video as 'scott' or 'Scott2' for instance
        self.annotators = set([normalize_name(name) for name in self.annotations.keys()])

        self.double_coded = True if len(self.annotators) > 1 else False

        if self.double_coded:
            self.irr_task = {}
            self.irr_social = {}
            self.irr_attitude = {}
            annotators = self.annotations.keys()
            for a0, a1 in combinations(annotators, 2):
                self.irr_task[(a0, a1)] = InterraterReliability(TASKENGAGEMENT,
                                                    self.annotations[a0],
                                                    self.annotations[a1],
                                                    self.cdt)

                self.irr_social[(a0, a1)] = InterraterReliability(SOCIALENGAGEMENT,
                                                    self.annotations[a0],
                                                    self.annotations[a1],
                                                    self.cdt)

                self.irr_attitude[(a0, a1)] = InterraterReliability(SOCIALATTITUDE,
                                                    self.annotations[a0],
                                                    self.annotations[a1],
                                                    self.cdt)


        self.duration = self.bagfile["duration"]
        if self.cdt == CHILDCHILD:
            self.duration *= 2

        self.children = [Child(self.experiment["purple-participant"])]
        self.avg_age = self.children[0].age

        self.nb_annotations = 0 # nb of annotations, averaged over the annotators
        self.total_nb_annotations = 0
        total_episodes_duration = 0

        for coder, coded in self.annotations.items():
            self.total_nb_annotations += len(coded["purple"])
            for a in coded["purple"]:
                for atype, ts in a.items():
                    total_episodes_duration += ts[1]-ts[0]
            if self.cdt == CHILDCHILD:
                self.total_nb_annotations += len(coded["yellow"])
                for a in coded["yellow"]:
                    for atype, ts in a.items():
                        total_episodes_duration += ts[1]-ts[0]

        self.avg_episode_duration = total_episodes_duration / self.total_nb_annotations

        self.nb_annotations = self.total_nb_annotations / len(self.annotators)


        self.annotation_rate = self.nb_annotations * 1. / self.duration

        if self.cdt == CHILDCHILD:
            self.children.append(Child(self.experiment["yellow-participant"]))
            self.avg_age = (self.children[0].age + self.children[1].age) / 2.0


    def avg_annotations_duration(self, annotations):
        nb_annotations = len(annotations)
        total_episodes_duration = 0

        for a in annotations:
            for atype, ts in a.items():
                total_episodes_duration += ts[1]-ts[0]

        return total_episodes_duration / nb_annotations



    def overview(self):
        res = "Recording %s -- %s -- duration: %s\n" % (self.id, self.cdt, mmss(self.duration))

        total=0
        for coder, coded in self.annotations.items():
            res += "\tCoder %s:\n" % coder
            res += "\t  - %d events for purple (%.1f per min)\n"% (len(coded["purple"]), len(coded["purple"])*60/self.duration)
            res += "\t  - avg duration of annotated events: %.1fs\n" % self.avg_annotations_duration(coded["purple"])
            total+=len(coded["purple"])
            if self.cdt == CHILDCHILD:
                res += "\t  - %d events for yellow (%.1f per min)\n"% (len(coded["yellow"]), len(coded["yellow"])*60/self.duration)
                res += "\t  - avg duration of annotated events: %.1fs\n" % self.avg_annotations_duration(coded["yellow"])
                total+=len(coded["yellow"])

        res += "Total # of annotations: %d\n" % total
        return res

    def csvrows(self):
        rows = []
        for coder, coded in self.annotations.items():
            rows.append([self.id, self.cdt, self.duration, normalize_name(coder), "purple", len(coded["purple"]), self.avg_annotations_duration(coded["purple"])])
            if self.cdt == CHILDCHILD:
                rows.append([self.id, self.cdt, self.duration, normalize_name(coder), "yellow", len(coded["yellow"]), self.avg_annotations_duration(coded["yellow"])])
        return rows


    def csvrows_annotations(self, construct):

        rows = []
        for coder, coded in self.annotations.items():
            printer = TimelinePrinter(self.id,
                                      construct,
                                      coder,
                                      coded,
                                      self.cdt)
            rows += printer.csvrows()
        return rows


    def __repr__(self):
        return self.id




class Dataset:

    def __init__(self, root):

        self.dataset = []

        self.total_nb_recordings = 0

        for dirpath, dirs, files in os.walk(root, topdown=False):
            for name in files:
                fullpath = os.path.join(dirpath, name)
                if name == "experiment.yaml":
                    if dirpath.split(os.sep)[-1].startswith("exclude_"):
                        logging.info("%s has been excluded" % fullpath)
                        continue
                    logging.debug("Processing %s" % fullpath)
                    self.total_nb_recordings += 1
                    self.processpath(dirpath)

        self.dataset.sort(key=lambda val: repr(val))

        self.total_duration = 0
        self.nb_children = 0
        self.nb_childchild = 0
        self.nb_childrobot= 0

        for record in self.dataset:
            self.total_duration += record.duration
            if record.cdt == CHILDCHILD:
                self.nb_childchild += 1
            elif record.cdt == CHILDROBOT:
                self.nb_childrobot += 1

    def overview(self):

        print("\nOVERVIEW")
        print("path" + " " * 19 + "  timestamp   len   condition  C1    C2")

        double_coded = 0
        annotators = {}
        for r in self.dataset:
            for a in r.annotators:
                annotators.setdefault(a,0)
                annotators[a] += 1
            if r.double_coded:
                double_coded += 1
            sys.stdout.write(r.overview())

        print("\n*****************************************************************************")
        print("\n*****************************************************************************\n\n")

        print("\n\nInter-rater reliability for double-coded recordings:\n")
        
        task_engagement_agreements = []
        social_engagement_agreements = []
        social_attitude_agreements = []

        for r in self.dataset:
            if r.double_coded:
                print("%s (%s) -- annotators: %s" % (r.id, r.cdt, r.annotations.keys()))
                print("%d total annotations, %d avg annotations over coders => %.1f annotations/min in avg" % (r.total_nb_annotations, r.nb_annotations, 60*r.annotation_rate))
                for pair in r.irr_task.keys():
                    print("Pair %s:" % str(pair))
                    print("\tTask engagement: Krippendorff's alpha: %.2f --  %.2f%% agreement" % \
                                        (r.irr_task[pair].alpha,
                                         r.irr_task[pair].percentage_agreement))
                    print("\tSocial engagement: Krippendorff's alpha: %.2f --  %.2f%% agreement" % \
                                        (r.irr_social[pair].alpha,
                                         r.irr_social[pair].percentage_agreement))
                    print("\tSocial attitude: Krippendorff's alpha: %.2f --  %.2f%% agreement" % \
                                        (r.irr_attitude[pair].alpha,
                                         r.irr_attitude[pair].percentage_agreement))
                    task_engagement_agreements.append(r.irr_task[pair].percentage_agreement)
                    social_engagement_agreements.append(r.irr_social[pair].percentage_agreement)
                    social_attitude_agreements.append(r.irr_attitude[pair].percentage_agreement)
                print("\n*****************************************************************************\n\n")

        print("\n")
        print("Total nb recordings: %d" % self.total_nb_recordings)
        print("Total nb recordings with annotations: %d" % len(self.dataset))
        print("Total nb recordings double-coded: %d (%.2f%% of whole dataset)" % (double_coded, double_coded * 100. / self.total_nb_recordings))
        print("Annotated recording per annotators: %s:" % annotators)


        total_nb_annotations = []
        nb_annotations = []
        durations = []
        avg_episode_durations = []
        for r in self.dataset:
            total_nb_annotations.append(r.total_nb_annotations)
            nb_annotations.append(r.nb_annotations)
            durations.append(r.duration)
            avg_episode_durations.append(r.avg_episode_duration)

        annotations_per_min = np.array(nb_annotations) * 60. / durations

        print("\n\nTotal duration: %.1f (%s)" % (np.sum(durations), hhmmss(np.sum(durations))))
        print("Total # annotations: %d" % np.sum(total_nb_annotations))
        print("# annotations (avg when # coder > 1): %d" % np.sum(nb_annotations))
        print("Average annotations per record: %.1f (SD: %.1f)" % (np.mean(nb_annotations), np.std(nb_annotations)))
        print("Average annotations per minute: %.1f (SD: %.1f)" % (np.mean(annotations_per_min), np.std(annotations_per_min)))
        print("Average annotations duration: %.1fsec (SD: %.1f)" % (np.mean(avg_episode_durations), np.std(avg_episode_durations)))

        print("\n")
        print("Average agreement on double-coded recordings -- task engagement: %.1f%% (SD: %.1f)" % (np.mean(task_engagement_agreements), np.std(task_engagement_agreements)))
        print("Average agreement on double-coded recordings -- social engagement: %.1f%% (SD: %.1f)" % (np.mean(social_engagement_agreements), np.std(social_engagement_agreements)))
        print("Average agreement on double-coded recordings -- social attitude: %.1f%% (SD: %.1f)" % (np.mean(social_attitude_agreements), np.std(social_attitude_agreements)))

    def processpath(self, path):

        with open(os.path.join(path, "experiment.yaml"), 'r') as yml:
            expe = yaml.load(yml)

        with open(os.path.join(path, "freeplay.bag.yaml"), 'r') as yml:
            bagfile = yaml.load(yml)

        annotations = {}
        for file in os.listdir(path):
            if file.startswith("freeplay.annotations.") and file.endswith(".yaml"):
                annotationfile = os.path.join(path, file)
                annotator = file.split("freeplay.annotations.")[1].split(".yaml")[0]

                with open(annotationfile, 'r') as yml:
                    annotations[annotator] = yaml.load(yml)

        if len(annotations) > 0:
            logging.info("%s: %s annotations" % (path, len(annotations)))
            record = Recording(path, expe, bagfile, annotations)
            self.dataset.append(record)

        else:
            logging.warn("%s: No annotations!!" % path)

    def write_csv(self, csvfile):
        writer = csv.writer(csvfile)
        writer.writerow(["id", "condition", "duration", "coder", "child", "nb_annotations","avg_episode_duration"])
        for r in self.dataset:
            for row in r.csvrows():
                writer.writerow(row)

    def write_csv_annotations(self, csvfile):
        writer = csv.writer(csvfile)
        writer.writerow(TimelinePrinter.csv_header())
        for r in self.dataset:
            for row in r.csvrows_annotations(TASKENGAGEMENT):
                writer.writerow(row)

        for r in self.dataset:
            for row in r.csvrows_annotations(SOCIALENGAGEMENT):
                writer.writerow(row)

        for r in self.dataset:
            for row in r.csvrows_annotations(SOCIALATTITUDE):
                writer.writerow(row)



if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='PInSoRo Dataset -- Annotations Statistics')
    parser.add_argument("path", help="root path of the dataset -- recordings are recursively looked for from this path")
    parser.add_argument("-c", "--csv", nargs='?', type=argparse.FileType('wb'), default=False, const=sys.stdout, help="save the dataset statistics to the specified CSV file (default to stdout)")
    parser.add_argument("--csv-full", nargs='?', type=argparse.FileType('wb'), default=False, const=sys.stdout, help="save the full annotation set to the specified CSV file (default to stdout)")

    args = parser.parse_args()

    dataset = Dataset(args.path)
    if args.csv:
        dataset.write_csv(args.csv)
    elif args.csv_full:
        dataset.write_csv_annotations(args.csv_full)
    else:
        dataset.overview()
